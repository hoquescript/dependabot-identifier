generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model dependabot_repositories {
  project_id   Int       @id @default(autoincrement())
  user_name    String?   @db.VarChar(255)
  project_name String?   @db.VarChar(255)
  url          String?   @db.VarChar(255)
  description  String?   @db.VarChar(255)
  language     String?   @db.VarChar(255)
  created_at   DateTime? @db.Timestamp(6)
  updated_at   DateTime? @db.Timestamp(6)
}

model projects {
  id                                                 Int             @id(map: "repositories_pkey") @default(autoincrement())
  url                                                String?         @db.VarChar(255)
  owner_id                                           Int?
  name                                               String          @db.VarChar(255)
  description                                        String?         @db.VarChar(255)
  language                                           String?         @db.VarChar(255)
  updated_at                                         DateTime        @default(dbgenerated("'2020-01-01 00:00:01'::timestamp without time zone")) @db.Timestamp(6)
  users                                              users?          @relation(fields: [owner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "repositories_owner_id_fkey")
  pull_requests_pull_requests_base_repo_idToprojects pull_requests[] @relation("pull_requests_base_repo_idToprojects")
  pull_requests_pull_requests_head_repo_idToprojects pull_requests[] @relation("pull_requests_head_repo_idToprojects")
  repositories                                       repositories[]
}

model pull_request_history {
  id              Int           @id @default(autoincrement())
  pull_request_id Int
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  action          String        @db.VarChar(255)
  actor_id        Int?
  users           users?        @relation(fields: [actor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pull_requests   pull_requests @relation(fields: [pull_request_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pull_requests {
  id                                            Int                    @id(map: "pull_requests_pkey1") @default(autoincrement())
  head_repo_id                                  Int?
  base_repo_id                                  Int
  pullreq_id                                    Int
  intra_branch                                  Boolean
  pull_request_history                          pull_request_history[]
  projects_pull_requests_base_repo_idToprojects projects               @relation("pull_requests_base_repo_idToprojects", fields: [base_repo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects_pull_requests_head_repo_idToprojects projects?              @relation("pull_requests_head_repo_idToprojects", fields: [head_repo_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model pull_requests_modified {
  id           Int     @id(map: "pull_requests_pkey") @default(autoincrement())
  head_repo_id Int?
  base_repo_id Int
  pullreq_id   Int
  intra_branch Boolean
}

model repositories {
  id            Int       @id(map: "repositories_pkey1") @default(autoincrement())
  repository_id Int?
  installed     Boolean
  projects      projects? @relation(fields: [repository_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                   Int                    @id @default(autoincrement())
  login                String                 @db.VarChar(255)
  company              String?                @db.VarChar(255)
  created_at           DateTime               @default(now()) @db.Timestamp(6)
  type                 String                 @default("USR") @db.VarChar(255)
  fake                 Boolean                @default(false)
  deleted              Boolean                @default(false)
  long                 Decimal?               @db.Decimal(11, 8)
  lat                  Decimal?               @db.Decimal(10, 8)
  country_code         String?                @db.Char(3)
  state                String?                @db.VarChar(255)
  city                 String?                @db.VarChar(255)
  location             String?
  projects             projects[]
  pull_request_history pull_request_history[]
}
